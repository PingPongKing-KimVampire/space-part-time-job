version: "3.8"

services:
  apigateway:
    image: nginx:latest
    container_name: apigateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./APIGateway/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./APIGateway/cors.conf:/etc/nginx/conf.d/cors.conf:ro
      - ./APIGateway/certs:/etc/nginx/certs:ro
    depends_on:
      - userservice
    networks:
      - be-network
    restart: on-failure

  userservice:
    build:
      context: ./UserService/Server
      dockerfile: Dockerfile
    container_name: userservice
    ports:
      - "6000:3000"
      - "6001:2500"
    environment:
      - MYSQL_HOST=mysqldb
      - MYSQL_USER=root
      - MYSQL_PASSWORD=example
      - MYSQL_PORT=3306
      - MYSQL_DB=userservice_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKER=kafka:9092
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - GRPC_PORT=2500
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - GRPC_DISTRICT_SERVER_URL=districtservice:2500
    depends_on:
      - mysqldb
      - redis
      - kafka
    networks:
      - be-network
    restart: on-failure

  mysqldb:
    image: mysql:8
    container_name: mysqldb
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: userservice_db
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - be-network
    restart: on-failure

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - be-network
    restart: on-failure

  smsservice:
    build:
      context: ./SMSService/Server
      dockerfile: Dockerfile
    container_name: smsservice
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - SENDER_PHONE_NUMBER=${SENDER_PHONE_NUMBER}
      - COOLSMS_API_KEY=${COOLSMS_API_KEY}
      - COOLSMS_API_SECRET=${COOLSMS_API_SECRET}
      - SMS_MODE=${SMS_MODE}
    depends_on:
      - kafka
    networks:
      - be-network
    restart: on-failure

  kafka:
    image: bitnami/kafka:3.5.1-debian-11-r44
    container_name: kafka
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - be-network
    restart: on-failure

  kafkawebui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafkawebui
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=Local-Kraft-Cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - DYNAMIC_CONFIG_ENABLED=true
    depends_on:
      - kafka
    networks:
      - be-network
    restart: on-failure

  imageuploadservice:
    build:
      context: ./ImageUploadService/Server
      dockerfile: Dockerfile
    container_name: imageuploadservice
    ports:
      - "4001:2500"
    environment:
      - MONGO_HOST=imageuploadmongodb
      - MONGO_PORT=27017
      - MONGO_DB=imageDB
      - GRPC_USER_SERVER_URL=userservice:2500
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_ACCESS_KEY=${AWS_S3_ACCESS_KEY}
      - AWS_S3_SECRET_ACCESS_KEY=${AWS_S3_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - PORT=4000
      - GRPC_PORT=2500
    depends_on:
      - imageuploadmongodb
      - userservice
    networks:
      - be-network
    restart: on-failure

  imageuploadmongodb:
    image: mongo:latest
    container_name: imageuploadmongodb
    ports:
      - "27017:27017"
    volumes:
      - imageuploadmongodb_data:/data/db
    networks:
      - be-network
    restart: on-failure

  jobpostservice:
    build:
      context: ./JobPostService/server
      dockerfile: Dockerfile
    container_name: jobpostservice
    ports:
      - "3333:3000"
      - "3334:2500"
    environment:
      - MONGO_HOST=jobpostmongodb
      - MONGO_PORT=27017
      - MONGO_DB=jobpostDB
      - GRPC_IMAGE_UPLOAD_SERVER_URL=imageuploadservice:2500
      - PORT=3000
      - gRPCPort=2500
      - KAKAO_REST_API_KEY=${KAKAO_REST_API_KEY}
      - REDIS_HOST=jobpostredis
      - REDIS_PORT=6379
    depends_on:
      - jobpostmongodb
      - userservice
    networks:
      - be-network
    restart: on-failure

  jobpostredis:
    image: redis:latest
    container_name: jobpostredis
    ports:
      - "6479:6379"
    networks:
      - be-network
    restart: on-failure

  jobpostmongodb:
    image: mongo:latest
    container_name: jobpostmongodb
    ports:
      - "27777:27017"
    volumes:
      - jobpostmongodb_data:/data/db
    networks:
      - be-network
    restart: on-failure

  districtservice:
    build:
      context: ./DistrictService
      dockerfile: Dockerfile
    container_name: districtservice
    environment:
      - PORT=3000
      - GRPC_PORT=2500
    networks:
      - be-network
    restart: on-failure

  graphqlaggregationservice:
    build:
      context: ./GraphQLAggregationService/server
      dockerfile: Dockerfile
    container_name: graphqlaggregationservice
    ports:
      - "11000:3000"
    environment:
      - PORT=3000
      - GRPC_USER_SERVER_URL=userservice:2500
      - GRPC_JOB_POST_SERVER_URL=jobpostservice:2500
      - GRPC_DISTRICT_SERVER_URL=districtservice:2500
    networks:
      - be-network
    restart: on-failure

networks:
  be-network:
    driver: bridge

volumes:
  mysql_data:
    name: custom_mysql_data
  kafka_data:
    driver: local
  imageuploadmongodb_data:
    driver: local
  jobpostmongodb_data:
    driver: local
